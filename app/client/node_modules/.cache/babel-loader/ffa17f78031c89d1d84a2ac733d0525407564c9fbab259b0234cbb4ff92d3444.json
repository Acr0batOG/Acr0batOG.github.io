{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createPrintf = void 0;\nconst boolean_1 = require(\"./boolean\");\nconst tokenize_1 = require(\"./tokenize\");\nconst formatDefaultUnboundExpression = (_subject, token) => {\n  return token.placeholder;\n};\nconst createPrintf = configuration => {\n  var _a;\n  // eslint-disable-next-line unicorn/consistent-function-scoping -- intentional per @gajus\n  const padValue = (value, width, flag) => {\n    if (flag === '-') {\n      return value.padEnd(width, ' ');\n    } else if (flag === '-+') {\n      return ((Number(value) >= 0 ? '+' : '') + value).padEnd(width, ' ');\n    } else if (flag === '+') {\n      return ((Number(value) >= 0 ? '+' : '') + value).padStart(width, ' ');\n    } else if (flag === '0') {\n      return value.padStart(width, '0');\n    } else {\n      return value.padStart(width, ' ');\n    }\n  };\n  const formatUnboundExpression = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.formatUnboundExpression) !== null && _a !== void 0 ? _a : formatDefaultUnboundExpression;\n  const cache = {};\n  // eslint-disable-next-line complexity\n  return (subject, ...boundValues) => {\n    let tokens = cache[subject];\n    if (!tokens) {\n      tokens = cache[subject] = (0, tokenize_1.tokenize)(subject);\n    }\n    let result = '';\n    for (const token of tokens) {\n      if (token.type === 'literal') {\n        result += token.literal;\n      } else {\n        let boundValue = boundValues[token.position];\n        if (boundValue === undefined) {\n          result += formatUnboundExpression(subject, token, boundValues);\n        } else if (token.conversion === 'b') {\n          result += (0, boolean_1.boolean)(boundValue) ? 'true' : 'false';\n        } else if (token.conversion === 'B') {\n          result += (0, boolean_1.boolean)(boundValue) ? 'TRUE' : 'FALSE';\n        } else if (token.conversion === 'c') {\n          result += boundValue;\n        } else if (token.conversion === 'C') {\n          result += String(boundValue).toUpperCase();\n        } else if (token.conversion === 'i' || token.conversion === 'd') {\n          boundValue = String(Math.trunc(boundValue));\n          if (token.width !== null) {\n            boundValue = padValue(boundValue, token.width, token.flag);\n          }\n          result += boundValue;\n        } else if (token.conversion === 'e') {\n          result += Number(boundValue).toExponential();\n        } else if (token.conversion === 'E') {\n          result += Number(boundValue).toExponential().toUpperCase();\n        } else if (token.conversion === 'f') {\n          if (token.precision !== null) {\n            boundValue = Number(boundValue).toFixed(token.precision);\n          }\n          if (token.width !== null) {\n            boundValue = padValue(String(boundValue), token.width, token.flag);\n          }\n          result += boundValue;\n        } else if (token.conversion === 'o') {\n          result += (Number.parseInt(String(boundValue), 10) >>> 0).toString(8);\n        } else if (token.conversion === 's') {\n          if (token.width !== null) {\n            boundValue = padValue(String(boundValue), token.width, token.flag);\n          }\n          result += boundValue;\n        } else if (token.conversion === 'S') {\n          if (token.width !== null) {\n            boundValue = padValue(String(boundValue), token.width, token.flag);\n          }\n          result += String(boundValue).toUpperCase();\n        } else if (token.conversion === 'u') {\n          result += Number.parseInt(String(boundValue), 10) >>> 0;\n        } else if (token.conversion === 'x') {\n          boundValue = (Number.parseInt(String(boundValue), 10) >>> 0).toString(16);\n          if (token.width !== null) {\n            boundValue = padValue(String(boundValue), token.width, token.flag);\n          }\n          result += boundValue;\n        } else {\n          throw new Error('Unknown format specifier.');\n        }\n      }\n    }\n    return result;\n  };\n};\nexports.createPrintf = createPrintf;","map":{"version":3,"names":["Object","defineProperty","exports","value","createPrintf","boolean_1","require","tokenize_1","formatDefaultUnboundExpression","_subject","token","placeholder","configuration","_a","padValue","width","flag","padEnd","Number","padStart","formatUnboundExpression","cache","subject","boundValues","tokens","tokenize","result","type","literal","boundValue","position","undefined","conversion","boolean","String","toUpperCase","Math","trunc","toExponential","precision","toFixed","parseInt","toString","Error"],"sources":["C:/Users/grhys/Acr0batOG.github.io/app/client/node_modules/fast-printf/dist/src/createPrintf.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createPrintf = void 0;\nconst boolean_1 = require(\"./boolean\");\nconst tokenize_1 = require(\"./tokenize\");\nconst formatDefaultUnboundExpression = (_subject, token) => {\n    return token.placeholder;\n};\nconst createPrintf = (configuration) => {\n    var _a;\n    // eslint-disable-next-line unicorn/consistent-function-scoping -- intentional per @gajus\n    const padValue = (value, width, flag) => {\n        if (flag === '-') {\n            return value.padEnd(width, ' ');\n        }\n        else if (flag === '-+') {\n            return ((Number(value) >= 0 ? '+' : '') + value).padEnd(width, ' ');\n        }\n        else if (flag === '+') {\n            return ((Number(value) >= 0 ? '+' : '') + value).padStart(width, ' ');\n        }\n        else if (flag === '0') {\n            return value.padStart(width, '0');\n        }\n        else {\n            return value.padStart(width, ' ');\n        }\n    };\n    const formatUnboundExpression = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.formatUnboundExpression) !== null && _a !== void 0 ? _a : formatDefaultUnboundExpression;\n    const cache = {};\n    // eslint-disable-next-line complexity\n    return (subject, ...boundValues) => {\n        let tokens = cache[subject];\n        if (!tokens) {\n            tokens = cache[subject] = (0, tokenize_1.tokenize)(subject);\n        }\n        let result = '';\n        for (const token of tokens) {\n            if (token.type === 'literal') {\n                result += token.literal;\n            }\n            else {\n                let boundValue = boundValues[token.position];\n                if (boundValue === undefined) {\n                    result += formatUnboundExpression(subject, token, boundValues);\n                }\n                else if (token.conversion === 'b') {\n                    result += (0, boolean_1.boolean)(boundValue) ? 'true' : 'false';\n                }\n                else if (token.conversion === 'B') {\n                    result += (0, boolean_1.boolean)(boundValue) ? 'TRUE' : 'FALSE';\n                }\n                else if (token.conversion === 'c') {\n                    result += boundValue;\n                }\n                else if (token.conversion === 'C') {\n                    result += String(boundValue).toUpperCase();\n                }\n                else if (token.conversion === 'i' || token.conversion === 'd') {\n                    boundValue = String(Math.trunc(boundValue));\n                    if (token.width !== null) {\n                        boundValue = padValue(boundValue, token.width, token.flag);\n                    }\n                    result += boundValue;\n                }\n                else if (token.conversion === 'e') {\n                    result += Number(boundValue)\n                        .toExponential();\n                }\n                else if (token.conversion === 'E') {\n                    result += Number(boundValue)\n                        .toExponential()\n                        .toUpperCase();\n                }\n                else if (token.conversion === 'f') {\n                    if (token.precision !== null) {\n                        boundValue = Number(boundValue).toFixed(token.precision);\n                    }\n                    if (token.width !== null) {\n                        boundValue = padValue(String(boundValue), token.width, token.flag);\n                    }\n                    result += boundValue;\n                }\n                else if (token.conversion === 'o') {\n                    result += (Number.parseInt(String(boundValue), 10) >>> 0).toString(8);\n                }\n                else if (token.conversion === 's') {\n                    if (token.width !== null) {\n                        boundValue = padValue(String(boundValue), token.width, token.flag);\n                    }\n                    result += boundValue;\n                }\n                else if (token.conversion === 'S') {\n                    if (token.width !== null) {\n                        boundValue = padValue(String(boundValue), token.width, token.flag);\n                    }\n                    result += String(boundValue).toUpperCase();\n                }\n                else if (token.conversion === 'u') {\n                    result += Number.parseInt(String(boundValue), 10) >>> 0;\n                }\n                else if (token.conversion === 'x') {\n                    boundValue = (Number.parseInt(String(boundValue), 10) >>> 0).toString(16);\n                    if (token.width !== null) {\n                        boundValue = padValue(String(boundValue), token.width, token.flag);\n                    }\n                    result += boundValue;\n                }\n                else {\n                    throw new Error('Unknown format specifier.');\n                }\n            }\n        }\n        return result;\n    };\n};\nexports.createPrintf = createPrintf;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}